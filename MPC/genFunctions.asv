% It generates our functions that return our cose
% and constraint matrices/vectors
% We should only need to run this every time we change the problem

clc
clear
close all

N = 6; % Number of nodes


% Create our state and input vectors symbolically
q = sym('q', [4 1]);
u = sym('u', [2 1]);

% Dynamics
m = 1;
A = [0 1 0 0; 0 0 0 0; 0 0 0 1; 0 0 0 0];
B = [0 0; 1/m 0; 0 0; 0 1/m];

dq = A*q + B*u;

% Define symbolic varibles for every state at each node
qN = sym('qN', [4 N]);
uN = sym('uN', [2 N]);

% 1st-order Dynamics for each of the states at each node
dqN = A * qN + B * uN

% Defect constraints
% Explicit Euler
syms T % Constant finite time horizon
dt = T/(N-1); % Time between nodes

qNext = qN(:, 2:end);
qPrev = qN(:, 1:end-1);
dqPrev = dqN(:, 1:end-1);

defect = qNext-qPrev-dqPrev*dt;
defect = defect(:)

syms Fmax % Max force
q0 = sym('q0', [4 1]);

% Initial Condition constraints
ic_constraints = q0-qN(:, 1);

% Inequality
limit_constraints = [uN(:) - Fmax; -uN(:) - Fmax];

eqCon = [defect; ic_constraints]
ineqCon = limit_constraints

% Cost Function
Q = sym('Q', [4 4])
R = sym('R', [2 2])
qdes = sym('qdes', [4 1])
cost = sum(sum(((qdes-qN(:,1:end-1)).'*Q*(qdes-qN(:,1:end-1))...
    + uN(:,1:end-1).'*R*uN(:,1:end-1))*dt))

% Decision vector
x = [uN(:); qN(:)]

% Cost
H = hessian(cost, x)
C = subs(jacobian(cost, x), x, zeros(size(x))).'

% Constraints
% inequality constraint
A = jacobian(ineqCon, x)
b = -subs(ineqCon,x,zeros(size(x)))

A = jacobian(eqCon, x)
b = -subs(eqCon,x,zeros(size(x)))